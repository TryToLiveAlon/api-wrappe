import { createCanvas, registerFont } from "canvas";
import fs from "fs";
import path from "path";
import FormData from "form-data";
import fetch from "node-fetch";

registerFont(path.resolve('./fonts/OpenSans-Regular.ttf'), { family: 'OpenSans' });

export default async function handler(req, res) {
Â  const backgrounds = ["34D2E8", "F7D600", "14DE32", "B94BA6", "E12727", "98A045"];
Â  const colors = ["734646", "FFFF00", "00FF00", "FF0000", "00FFFF", "0000FF", "FF9000", "FF00FF", "6E00FF", "0F7209", "CCFF00", "FFD3EF", "FFFFFF", "000000", "482B10"];
Â  const characters = "1234567890AZSXDCFVGBLQWERTYUIOPqazwsxedcrfvtgbyhnmlkj";

Â  const randomItem = (arr) => arr[Math.floor(Math.random() * arr.length)];
Â  const generateCaptcha = (length) => {
Â  Â  let result = "";
Â  Â  for (let i = 0; i < length; i++) {
Â  Â  Â  result += characters.charAt(Math.floor(Math.random() * characters.length));
Â  Â  }
Â  Â  return result;
Â  };

Â  const captchaLength = parseInt(req.query.length) || Math.floor(Math.random() * 3) + 5;
Â  const captcha = req.query.text || generateCaptcha(captchaLength);
Â  const background = req.query.background || randomItem(backgrounds);
Â  const size = parseInt(req.query.size) || Math.floor(Math.random() * 4) * 16 + 16;
Â  const color = req.query.color || randomItem(colors);

Â  const hexRegex = /^[0-9A-Fa-f]{6}$/;
Â  if (!hexRegex.test(background) || !hexRegex.test(color)) {
Â  Â  return res.status(400).json({
Â  Â  Â  status: "ERROR",
Â  Â  Â  message: "Color and background must be 6-digit hex codes (no #)",
Â  Â  Â  direct_link: null,
Â  Â  });
Â  }

Â  try {
Â  Â  const width = 300;
Â  Â  const height = 100;

Â  Â  const canvas = createCanvas(width, height);
Â  Â  const ctx = canvas.getContext("2d");

Â  Â  ctx.fillStyle = `#${background}`;
Â  Â  ctx.fillRect(0, 0, width, height);

Â  Â  ctx.font = `${size}px "OpenSans"`;
Â  Â  ctx.fillStyle = `#${color}`;
Â  Â  ctx.textAlign = "center";
Â  Â  ctx.textBaseline = "middle";

Â  Â  ctx.shadowColor = "rgba(0, 0, 0, 0.3)";
Â  Â  ctx.shadowOffsetX = 2;
Â  Â  ctx.shadowOffsetY = 2;
Â  Â  ctx.shadowBlur = 2;

Â  Â  ctx.fillText(captcha, width / 2, height / 2);

Â  Â  const buffer = canvas.toBuffer("image/jpeg");
Â  Â  const tempPath = path.join("/tmp", `${Date.now()}.jpg`);
Â  Â  fs.writeFileSync(tempPath, buffer);

Â  Â  const formData = new FormData();
Â  Â  formData.append("file", fs.createReadStream(tempPath));

Â  Â  const uploadRes = await fetch("https://file.io", {
Â  Â  Â  method: "POST",
Â  Â  Â  body: formData,
Â  Â  Â  headers: formData.getHeaders(),
Â  Â  Â  redirect: "manual" // ðŸš¨ Prevent auto redirect that breaks readable stream
Â  Â  });

Â  Â  // If 3xx status, get `location` header manually
Â  Â  if (uploadRes.status >= 300 && uploadRes.status < 400) {
Â  Â  Â  const redirectUrl = uploadRes.headers.get("location");
Â  Â  Â  return res.status(200).json({
Â  Â  Â  Â  status: "OK",
Â  Â  Â  Â  captcha,
Â  Â  Â  Â  background,
Â  Â  Â  Â  color,
Â  Â  Â  Â  size,
Â  Â  Â  Â  direct_link: redirectUrl,
Â  Â  Â  Â  developer: "https://t.me/TryToLiveAlone"
Â  Â  Â  });
Â  Â  }

Â  Â  const uploadData = await uploadRes.json();
Â  Â  fs.unlinkSync(tempPath);

Â  Â  if (!uploadData.success || !uploadData.link) {
Â  Â  Â  return res.status(400).json({
Â  Â  Â  Â  status: "ERROR",
Â  Â  Â  Â  message: "Upload failed",
Â  Â  Â  Â  direct_link: null
Â  Â  Â  });
Â  Â  }

Â  Â  return res.status(200).json({
Â  Â  Â  status: "OK",
Â  Â  Â  captcha,
Â  Â  Â  background,
Â  Â  Â  color,
Â  Â  Â  size,
Â  Â  Â  direct_link: uploadData.link,
Â  Â  Â  developer: "https://t.me/TryToLiveAlone"
Â  Â  });

Â  } catch (err) {
Â  Â  return res.status(500).json({
Â  Â  Â  status: "ERROR",
Â  Â  Â  message: "Internal server error",
Â  Â  Â  error: err.message
Â  Â  });
Â  }
      }
